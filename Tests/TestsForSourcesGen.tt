<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".cs" #>
// This file was generated automatically
// Do not change it manually, otherwise you'll lose all your hard work!
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;
using System.Text;

namespace Tests
{

    [TestClass]
    public class TestsForSources
    {		

#if TEST_SOURCES


        private String ExToString(Exception e)
        {
            var s = e.Message;
            if (e.InnerException != null)
            {
                s += " - " + ExToString(e.InnerException);
            }
            return s;
        }

<#
		// Get Solution info
		var serviceProvider = this.Host as IServiceProvider;
		var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
				
		var path = Path.Combine(Path.GetDirectoryName(dte.Solution.FullName), "Tests/Examples");

		foreach(var fname in (new DirectoryInfo(path)).GetFiles("*.mt") ) {
			var testname = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Path.GetFileNameWithoutExtension(fname.FullName).Replace("_", " ").Trim()).Replace(" ", "");
#>		
		[TestMethod]
		public void Eval<#=testname#>()
		{
			try 
			{				
				// Read file content (as embedded resource)
				var src = File.ReadAllText(@"<#=fname.FullName#>");
			
				using(FileStream str = new FileStream(@"<#=fname.FullName#>.log", FileMode.OpenOrCreate, FileAccess.Write))
				{					
					var sb = new StringBuilder();
                    using (StringWriter sw = new StringWriter(sb))
                    {
                        // Compile
                        var compiled = Coelophysis.Compiler.Compile(src);
                        compiled.AddDefaultBinds();
                        compiled.AddBinding("OUT", sw);
                        var r = compiled.Eval();

                        // Tests ...

                        // Wait for end
                        r.WaitForValue();
												
						// Output to string
						var strsw = sw.ToString();
                        File.WriteAllText(Path.Combine(Directory.GetCurrentDirectory(), "<#=testname#>.out.test"), strsw);
                    }
				}		
			}
			catch(Exception e)
			{
				Assert.Fail(ExToString(e));
			}
		}

<#
		}
#>

#endif

	}

}